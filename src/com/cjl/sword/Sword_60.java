package com.cjl.sword;

/*
    问题描述：
        把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
        你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
    示例 1:
        输入: 1
        输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
    示例 2:
        输入: 2
        输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
    限制：
        1 <= n <= 11
 */
public class Sword_60 {

    // 动态规划
    // n个骰子的点数分解为n-1个骰子的点数加上一个骰子的点数
    // 时间复杂度是O(N^2)，空间复杂度是O(N^2)
    public double[] solution1(int n) {
        double[] res = {1/6d, 1/6d, 1/6d, 1/6d, 1/6d, 1/6d};    // 初始化一个骰子的几率
        for (int i = 2; i <= n; i++) {  // n个骰子
            double[] tmp = new double[5*i + 1];      // 每组骰子点数的长度
            for (int j = 0; j < res.length; j++) {
                for (int k = 0; k < 6; k++) {
                    tmp[j+k] += res[j]/6;   // 更新每增加一个骰子当前点数出现的几率
                }
            }
            res = tmp;
        }
        return res;
    }
}
